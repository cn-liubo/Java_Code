<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liu.dao.StudentDao">

    <!--
        parameterType：表示dao接口中方法的参数的数据类型
            parameterType它的值时java的数据类型的全限定名称或者是mybatis定义的别名
            例如：parameterType="java.lang.Integer"
                 parameterType="int"

        注意：parameterType不是强制的，mybatis通过反射机制能够发现接口参数的数据类型
        所以可以没有。一般我们也不写。

        使用#{}之后，mybatis执行sql是使用的jdbc中的PreparedStatement对象
        由mybatis执行下面的代码：
        1.mybatis创建Connection，PreparedStatement对象
            String sql = "select id,name,email,age from student where id=?";
            PreparedStatement ps = conn.preparedStatement(sql);
            ps.setInt(1, 1001);

        2.执行sql封装为resultType="com.liu.domain.Student"这个对象
            ResultSet rs = ps.executeQuery();
            Student student = null;
            while(rs.next()){
                //从数据库中取表的一行数据，存到一个java对象的属性中
                student = new Student();
                student.setId(rs.getInt("id"));
                student.setId(rs.getString("name"));
                student.setId(rs.getString("email"));
                student.setId(rs.getInt("age"));
            }
            return student;//赋值给dao调用的返回值
    -->
    <select id="selectStudentById" parameterType="java.lang.Integer" resultType="com.liu.domain.Student">
        select id,name,email,age from student where id=${id}
    </select>

    <!--多个参数，使用@Parma命名-->
    <select id="selectMultiParam" resultType="com.liu.domain.Student">
        select id,name,email,age from student where name=#{myname} or age=#{myage}
    </select>

    <!--多个参数，使用java对象的属性值，作为参数实际值
        使用对象语法：#{属性名,javaType=类型名称,jdbcType=数据类型} 很少用
                    javaType：指java中的属性的数据类型
                    jdbcType：在数据库中的数据类型
                    例如：#{paramName,javaType=java.lang.String,jdbcType=VARCHAR}

        我们使用的简化方式：#{属性名},javaType,jdbcType的值mybatis通过反射能获取，不用提供

    -->
    <!--<select id="selectMultiObject" resultType="com.liu.domain.Student">
        select id,name,email,age from student where
        name=#{paramName,javaType=java.lang.String,jdbcType=VARCHAR}
        or age=#{paramName,javaType=java.lang.Integer,jdbcType=INTEGER}
    </select>-->
    <select id="selectMultiObject" resultType="com.liu.domain.Student">
        select id,name,email,age from student where name=#{paramName} or age=#{paramAge}
    </select>

    <select id="selectMultiStudent" resultType="com.liu.domain.Student">
        select id,name,email,age from student where name=#{name} or age=#{age}
    </select>

    <!--多个参数使用位置-->
    <select id="selectMultiPosition" resultType="com.liu.domain.Student">
        select id,name,email,age from student where name=#{arg0} or age=#{arg1}
    </select>

    <!--多个参数使用Map
        使用的语法： #{map的key}
    -->
    <select id="selectMultiMap" resultType="com.liu.domain.Student">
        select id,name,email,age from student where name=#{name} or age=#{age}
    </select>


    <select id="selectUse$" resultType="com.liu.domain.Student">
        select * from student where name=${name}
    </select>

    <!--使用$替换列名-->
    <select id="selectUse$Order" resultType="com.liu.domain.Student">
                select * from student order by ${colName}
    </select>
</mapper>
